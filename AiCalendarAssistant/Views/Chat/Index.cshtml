@model AiCalendarAssistant.Controllers.ChatViewModel
@{
    ViewData["Title"] = "Chat";
    var selectedChatId = (int?)ViewData["SelectedChatId"];
}

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />

<div class="video-background">
    <video autoplay muted loop playsinline>
        <source src="/videos/bg-video-landing.mp4" type="video/mp4" />
        Your browser does not support the video tag.
    </video>
    <div class="video-overlay"></div>
</div>

<div class="container mt-4">
    <div class="row mb-4">
        <div class="col-md-12">
            <div class="card shadow-sm rounded-4">
                <div class="card-body">
                    <h5 class="card-title">User Description</h5>
                    <div class="mb-3">
                        <textarea id="descriptionInput" class="form-control" placeholder="Enter a description about yourself..."></textarea>
                    </div>
                    <button class="btn btn-info" onclick="submitDescription()">Submit Description</button>
                    <div class="mt-3 text-secondary" id="responseText"></div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-4">
            <h5>Your Chats</h5>

            <form asp-action="Create" method="post" class="mb-3">
                <button type="submit" class="btn btn-success w-100">+ New Chat</button>
            </form>

            <ul class="list-group mb-3">
                @foreach (var chat in Model.Chats)
                {
                    <a href="?selectedChatId=@chat.Id" class="list-group-item list-group-item-action @(chat.Id == selectedChatId ? "active" : "")">
                        Chat @chat.Id
                    </a>
                }
            </ul>

            @if (selectedChatId.HasValue)
            {
                <form asp-action="Delete" method="post">
                    <input type="hidden" name="id" value="@selectedChatId" />
                    <button type="submit" class="btn btn-outline-danger btn-sm">Delete Selected Chat</button>
                </form>
            }
        </div>

        <div class="col-md-8">
            <div class="card shadow-sm rounded-4 mb-4">
                <div class="card-body">
                    <h5 class="card-title">Chat Messages</h5>
                    @if (Model.SelectedChat != null && Model.SelectedChat.Messages != null)
                    {
                        <div class="mb-3" style="max-height: 300px; overflow-y: auto;">
                            <ul class="list-group">
                                @foreach (var msg in Model.SelectedChat.Messages)
                                {
                                    <li class="list-group-item">
                                        <strong>@msg.Role:</strong> @msg.Text <small class="text-muted">(@msg.SentOn.ToShortTimeString())</small>
                                    </li>
                                }
                            </ul>
                        </div>
                    }
                    else
                    {
                        <p class="text-muted">No chat selected or no messages.</p>
                    }

                    @if (selectedChatId.HasValue)
                    {
                        <div class="mb-3">
                            <input type="text" id="messageInput" class="form-control" placeholder="Type your message..." />
                        </div>
                        <button class="btn btn-primary" onclick="sendMessage(@selectedChatId)">Send</button>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    function sendMessage(chatId) {
        const text = document.getElementById("messageInput").value;
        if (!text.trim()) return;

        fetch("/api/chat", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify({ text: text, chatId: chatId })
        })
        .then(response => response.text())
        .then(data => {
            location.reload();
        })
        .catch(error => {
            document.getElementById("responseText").textContent = "Error: " + error;
        });
    }

       function submitDescription() {
        const description = document.getElementById("descriptionInput").value;
        if (!description.trim()) return;

        fetch("/Chat/AddUserDescription", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify({ description: description })
        })
        .then(response => response.text())
        .then(data => {
            document.getElementById("responseText").textContent = data;
        })
        .catch(error => {
            document.getElementById("responseText").textContent = "Error: " + error;
        });
    }
</script>

<style>

    .video-background {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        overflow: hidden;
        z-index: -1;
    }

        .video-background video {
            min-width: 100%;
            min-height: 100%;
            object-fit: cover;
            filter: brightness(0.6) contrast(1.1);
            animation: zoomVideo 30s ease-in-out infinite alternate;
        }

    .video-overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: linear-gradient(to bottom right, rgba(0, 0, 0, 0.4), rgba(0, 0, 0, 0.7));
    }

    @@keyframes zoomVideo {
        0% {
            transform: scale(1);
        }

        100% {
            transform: scale(1.1);
        }
    }
</style>
