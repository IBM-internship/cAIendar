using System.Text;
using System.Text.Json;
using AiCalendarAssistant.Data.Models;
using AiCalendarAssistant.Models;
using Message = AiCalendarAssistant.Models.Message;

namespace AiCalendarAssistant.Services;

public class EmailComposer(PromptRouter router)
{
    private static readonly JsonDocument ReasonForCancellationSummarySchema = JsonDocument.Parse(
        """
        {
          "type": "json_schema",
          "json_schema": {
            "name": "reason_for_cancellation_summary",
            "strict": false,
            "schema": {
              "type": "object",
              "properties": {
                "summary": { "type": "string" }
              },
              "required": ["summary"],
              "additionalProperties": false
            }
          }
        }
        """);

    private static readonly JsonDocument CancellationEmailSchema = JsonDocument.Parse(
        """
        {
          "type": "json_schema",
          "json_schema": {
            "name": "cancellation_email",
            "strict": false,
            "schema": {
              "type": "object",
              "properties": {
                "email-body": { "type": "string" }
              },
              "required": ["email-body"],
              "additionalProperties": false
            }
          }
        }
        """);
    
    public string ComposeCancellationEmail(string recipient, Event cancelledEvent, Email reasonForCancellation)
    {
        var reasonForCancellationSummary = GetCancellationReasonSummary(reasonForCancellation);
        return ComposeCancellationEmail(recipient, cancelledEvent, reasonForCancellationSummary);
    }
    
    private string GetCancellationReasonSummary(Email reasonForCancellation)
    {
        var prompt = new PromptRequest(
        [
            new Message("system",
                """
                You are an assistant that summarises reasons for event cancellations.
                You will be provided with an email that contains the reason for cancellation.
                Provide a not specific summary of the reason for cancellation based on the email content.
                Do not include any personal information or specific details about the event.
                """),
            new Message("user",
                $"""
                 Summarise the reason for cancellation from the following email:
                 
                 From: {reasonForCancellation.SendingUserEmail}
                 Subject: {reasonForCancellation.Title}
                 Body: {reasonForCancellation.Body}
                 """)
        ], ResponseFormat: ReasonForCancellationSummarySchema.RootElement);

        var response = router.SendAsync(prompt).Result;
        using var doc = JsonDocument.Parse(response.Content!);
        return doc.RootElement.GetProperty("summary").GetString() ?? "";
    }

    private string ComposeCancellationEmail(string recipient, Event cancelledEvent, string reasonForCancellationSummary)
    {
        // TODO: add more context for the recipient (is he a boss or a colleague, etc.)
        var prompt = new PromptRequest(
        [
            new Message("system",
                """
                You are an assistant that composes emails to inform users about calendar event cancellations. 
                The email should be polite and informative, explaining the reason for the cancellation.
                Use an appropriate tone according to the context of the cancellation and the recipient of the cancellation email.
                """),
            new Message("user",
                $"""
                 Compose an email to {recipient} informing them that the following event has been cancelled:
                 
                 Title: {cancelledEvent.Title}
                 Date: {cancelledEvent.Start:yyyy-MM-dd}
                 Start Time: {cancelledEvent.Start:HH:mm}
                 End Time: {cancelledEvent.End:HH:mm}
                 Reason for cancellation: {reasonForCancellationSummary}
                 """)
        ], ResponseFormat: CancellationEmailSchema.RootElement);

        var response = router.SendAsync(prompt).Result;
        using var doc = JsonDocument.Parse(response.Content!);
        
        StringBuilder emailBodyBuilder = new();
        emailBodyBuilder.AppendLine(doc.RootElement.GetProperty("email-body").GetString() ?? "");
        emailBodyBuilder.AppendLine();
        emailBodyBuilder.AppendLine("[ This response was generated by an AI assistant ]");
        
        return emailBodyBuilder.ToString();
    }
}
