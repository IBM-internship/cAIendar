Can you help me setup my prompting structure in my new .net c# project.

What i have here is a basic structure for making requests to an external api - the ibm's Watsonx.

The only anoyting and unusual thing is the IAM token creation but the rest is really basic and can be overwritten completelly. 


What I want form you is to create a better structure for my prompting pipeline. Right now ive tryed to setup seamelss switch between ollama for local testing so i dont need to waste tokens on the ibm cloud while developing. My solution was not great and should be redone. 

Please create me a hole new structure that does this:
- keep the iam token and other secret handling 
- maybe 2 classes or could be 1 that for managing which backend the prompt goes to - watsonx or ollama, and puts the corresponding headears, tokens and son on
- create a template for calling the model with a:
a) chat history. Simple messages alternating between the assisntant and user with a system message. How this will work is we will just give this method/class the current history which contains the system prompt and the alternating messages and it will give it to the asssiant and append its responce. I will call that when the last message is from the user. We can make this ultra simple even with a simple array of strings which is fine
---
b) json output. This will be a more complex thing because here we need to specify the prompt, the json schema, the fields and so on. You think of a way of handling this structure. Here i will give you 2 examples of me curl-ing watsonx and ollama for json schema that work so you can take the format from them. 

Here is the one to watsonx:
```
curl --request POST "${WATSONX_URL}/ml/v1/text/chat?version=2023-10-25" \
  -H "Authorization: Bearer ${IAM_TOKEN}" \
  -H "Content-Type: application/json" \
  -d '{
    "model_id":       "'${IBM_MODEL_ID}'",
    "project_id":     "'${WATSONX_PROJECT_ID}'",
    "messages": [
      { "role": "system",    "content": "You are a helpful assistant." },
      { "role": "user",   "content": "Extract the book title, author, and publication year from this text:\n\nThe Hobbit by J.R.R. Tolkien was first published in 1937."}
    ],
    "response_format": {
      "type":        "json_schema",
      "json_schema": {
        "name":   "book_info",
        "strict": true,
        "schema": {
          "type":       "object",
          "properties": {
            "book_title":       { "type": "string" },
            "author":           { "type": "string" },
            "publication_year": { "type": "integer" }
          },
          "required": ["book_title","author","publication_year"],
          "additionalProperties": false
        }
      }
    },
    "max_tokens":  1000,
    "temperature": 0,
    "time_limit":  10000
	// other params
  }'
```

And here is the one to ollama:
```
curl http://localhost:11434/v1/chat/completions \
  -H "Content-Type: application/json" \
  -d '{
    "model": "granite3.3:latest",
    "messages": [
      { "role": "system", "content": "You are a helpful assistant." },
      { "role": "user",   "content": "Extract the book title, author, and publication year from this text:\n\nThe Hobbit by J.R.R. Tolkien was first published in 1937."}
    ],
    "response_format": {
      "type": "json_schema",
      "json_schema": {
        "name": "book_info",
        "strict": true,
        "schema": {
          "type": "object",
          "properties": {
            "book_title":       { "type": "string" },
            "author":           { "type": "string" },
            "publication_year": { "type": "integer" }
          },
          "required": ["book_title","author","publication_year"],
          "additionalProperties": false
        }
      }
    },
	"max_tokens": 1000,
    "temperature": 0,
    "time_limit":  10000
  }'
```

As you can see the messages and responsse_format are completelly identical, even some of the additional params of the end overlap between watsonx platform and ollama. Its just that in the beggining we have different handling of tokens, urls and so on. 

Creating the option for the json we can have the schema messages and additional params passed, the other handled by the switch between watsonx and ollama.
---
c) tool_call. This is similiar to json schema but uses another syntax for defining tools which are like functions or actions the model can take. Ive crafted curls showcasing the usage again on watsonx and on ollama. Here is the watsonx one:
```
 curl --request POST "${WATSONX_URL}/ml/v1/text/chat?version=2023-10-25" \
  -H "Authorization: Bearer ${IAM_TOKEN}" \
  -H "Content-Type: application/json" \
  -d '{
    "model_id":       "'${IBM_MODEL_ID}'",
    "project_id":     "'${WATSONX_PROJECT_ID}'",
    "messages": [
      {
        "role": "system",
        "content": "You are a helpful assistant that can call external tools."
      },
      {
        "role": "user",
        "content": "What is the current weather in Paris?"
      }
    ],
    "tools": [
      {
        "type": "function",
        "function": {
          "name":        "get_current_weather",
          "description": "Fetches the current weather for a given location",
          "parameters": {
            "type":       "object",
            "properties": {
              "location": {
                "type":        "string",
                "description": "The city and country, e.g., Paris, France"
              },
              "unit": {
                "type":        "string",
                "enum":        ["celsius", "fahrenheit"],
                "description": "Unit for temperature"
              }
            },
            "required": ["location"]
          }
        }
      }
    ],
    "tool_choice":  "auto",
    "max_tokens":   100,
    "temperature":  0,
    "time_limit":   1000
  }'
```

And here is the ollama:
```
curl http://localhost:11434/v1/chat/completions \
  -H "Content-Type: application/json" \
  -d '{
    "model": "granite3.3:latest",
    "messages": [
      {
        "role": "system",
        "content": "You are a helpful assistant that can call external tools."
      },
      {
        "role": "user",
        "content": "What is the current weather in Paris?"
      }
    ],
    "tools": [
      {
        "type": "function",
        "function": {
          "name": "get_current_weather",
          "description": "Fetches the current weather for a given location",
          "parameters": {
            "type": "object",
            "properties": {
              "location": {
                "type": "string",
                "description": "The city and country, e.g., Paris, France"
              },
              "unit": {
                "type": "string",
                "enum": ["celsius", "fahrenheit"],
                "description": "Unit for temperature"
              }
            },
            "required": ["location"]
          }
        }
      }
    ],
    "tool_choice": "auto",
    "max_tokens":   100,
    "temperature":  0,
    "time_limit":   1000
  }'
```


Again the body is completely identical, only thing is the headrs. For this we might have the additional args, the messages and tools as lists/jsons.
---

To conlude, create all the files needed to make the project work and showcase in Program.cs usege of everything.
